{
  "version": 3,
  "sources": ["../src/index.ts", "../src/util/log.ts", "../node_modules/comlink/src/comlink.ts", "../src/util/comlink.ts", "../src/api/fs.ts", "../src/api/layout.ts", "../src/api/events.ts", "../src/api/replDb.ts", "../src/jets/graphql.ts", "../src/jets/eval.ts", "../src/types/index.ts"],
  "sourcesContent": ["import { setDebugMode } from \"src/util/log\";\nimport { extensionPort } from \"./util/comlink\";\nexport * from \"./api\";\nexport * from \"./jets\";\nexport * from \"./util/log\";\nexport { extensionPort };\nexport * from './types'\n\nexport async function init({\n  permissions = [],\n  timeout = 1000,\n  debug = false,\n}: {\n  permissions?: string[];\n  timeout?: number;\n  debug?: boolean;\n}) {\n  setDebugMode(debug);\n\n  try {\n    await extensionPort.handshake({ permissions });\n  } catch (e) {\n    console.error(e);\n    // wind down\n    throw e;\n  }\n\n  return () => {\n    // wind down\n  };\n}\n", "let debugMode = false;\n\nexport function debug(msg: any) {\n  if (!debugMode) {\n    return;\n  }\n\n  console.log(msg);\n}\n\nexport function setDebugMode(mode: boolean) {\n  debugMode = mode;\n}\n", "/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n", "import * as Comlink from \"comlink\";\nimport { ExtensionPortAPI } from \"src/types\";\n\nexport const extensionPort = Comlink.wrap<ExtensionPortAPI>(\n  Comlink.windowEndpoint(self.parent, self, \"*\")\n);\n\nexport const proxy = Comlink.proxy;", "import { extensionPort, proxy } from \"src/util/comlink\";\nimport { WatchFileWatchers, WatchTextFileWatchers } from \"src/types\";\n\n/**\n * Reads the file specified at `path` and returns an object containing the contents, or an object containing an error if there was one\n */\nexport async function readFile(path: string) {\n  return extensionPort.readFile(path);\n}\n\n/**\n * Writes the file specified at `path` with the contents `content`\n */\nexport async function writeFile(path: string, content: string | Blob) {\n  return extensionPort.writeFile(path, content);\n}\n\n/**\n * Reads the directory specified at `path` and returns an object containing the contents, or an object containing an error if there was one\n */\nexport async function readDir(path: string) {\n  return extensionPort.readDir(path);\n}\n\n/**\n * Creates a directory at the specified path\n */\nexport async function createDir(path: string) {\n  return extensionPort.createDir(path);\n}\n\n/**\n * Deletes the file at the specified path\n */\nexport async function deleteFile(path: string) {\n  return extensionPort.deleteFile(path);\n}\n\n/**\n * Deletes the directory at the specified path\n */\nexport async function deleteDir(path: string) {\n  return extensionPort.deleteDir(path);\n}\n\n/**\n * Moves the file or directory at `from` to `to`\n */\nexport async function move(path: string, to: string) {\n  return extensionPort.move(path, to);\n}\n\n/** \n * Copies the file at `from` to `to`\n */\nexport async function copyFile(path: string, to: string) {\n  return extensionPort.copyFile(path, to);\n}\n\n/**\n * Watches the file at `path` for changes with the provided `watchers`. Returns a dispose method which cleans up the watchers\n */\nexport async function watchFile(path: string, watchers: WatchFileWatchers) {\n  // Note: comlink does not let us test for functions being present, so we provide default functions for all callbacks in case the user does not pass those, to keep the API flexible\n  return extensionPort.watchFile(path, proxy({\n    onChange: () => { },\n    onMoveOrDelete: () => { },\n    onError: () => { },\n    ...watchers\n  }));\n}\n\n/**\n * Watches a text file at `path` for changes with the provided `watchers`. Returns a dispose method which cleans up the watchers.\n *  \n * Use this for watching text files, and receive changes as versioned operational transform (OT) operations annotated with their source.\n */\nexport async function watchTextFile(path: string, watchers: WatchTextFileWatchers) {\n  // Note: comlink does not let us test for functions being present, so we provide default functions for all callbacks in case the user does not pass those, to keep the API flexible\n  return extensionPort.watchTextFile(path, proxy({\n    onReady: () => { },\n    onChange: () => { },\n    onMoveOrDelete: () => { },\n    onError: () => { },\n    ...watchers\n  }));\n}", "import { LayoutData, Pane } from \"src/types\";\nimport { extensionPort } from \"src/util/comlink\";\n\n/** \n * Returns whether a certain pane type is visible within the layout.\n * Example use case: check if the version control pane is visible\n * before doing something.\n */\nexport async function isPaneTypeVisible(paneType: string) {\n  return extensionPort.isPaneTypeVisible(paneType);\n}\n\n/**\n * Returns information about a pane by its type. If multiple panes of a type are open, this returns the first.\n */\nexport async function findPaneByType(paneType: string) {\n  return extensionPort.findPaneByType(paneType);\n}\n\n/**\n * Makes a pane the active one within its group\n */\nexport async function selectTab(paneId: string) {\n  return extensionPort.selectTab(paneId);\n}\n\n/**\n * Inserts a floating pane into the layout if it doesn't exist\n */\nexport async function insertFloatingPaneIfNotExist(pane: Pane) {\n  return extensionPort.insertFloatingPaneIfNotExist(pane);\n}\n\n/**\n * Removes all floating pane of a given type\n */\nexport async function removeFloatingPanesByType(paneType: string) {\n  return extensionPort.removeFloatingPanesByType(paneType);\n}\n\n/**\n * Gets the entire layout tree, with pane data\n */\nexport async function getLayoutState() {\n  return extensionPort.getLayoutState();\n}\n\n/**\n * Sets the layout tree and pane data\n */\nexport async function setLayoutState(state: LayoutData) {\n  return extensionPort.setLayoutState(state);\n}\n", "import { extensionPort, proxy } from \"src/util/comlink\";\nimport { Event } from \"src/types\";\n\n/**\n * Reads the file specified at `path` and returns an object containing the contents, or an object containing an error if there was one\n */\nexport async function emitEvent(event: Omit<Event, 'source'>) {\n  return extensionPort.emitEvent(event);\n}\n\n/**\n * Reads the file specified at `path` and returns an object containing the contents, or an object containing an error if there was one\n */\nexport async function onWorkspaceEvent(listener: (event: Event) => void) {\n  return extensionPort.onWorkspaceEvent(proxy(listener));\n}", "import { extensionPort } from \"src/util/comlink\";\n\n/**\n * Sets the value for a given key\n */\nexport async function set(args: { key: string, value: any }) {\n  return extensionPort.setReplDbValue(args.key, args.value);\n}\n\n/**\n * Returns a value associated with the given key\n */\nexport async function get(args: { key: string }) {\n  return extensionPort.getReplDbValue(args.key);\n}\n\n/**\n * Lists keys in the replDb. Accepts an optional `prefix`, which filters for keys beginning with the given prefix.\n */\nexport async function list(args: { prefix: string }) {\n  return extensionPort.listReplDbKeys(args.prefix);\n}\n\n/**\n * Deletes a key in the replDb.\n */\nexport async function del(args: { key: string }) {\n  return extensionPort.deleteReplDbKey(args.key);\n}", "import { extensionPort } from \"src\";\n\nlet queryWarned = false;\nexport async function queryGraphql({ query, variables }) {\n  if (!queryWarned) {\n    console.warn(\"@replit/extensions: queryGraphql() will be deprecated very soon\");\n    queryWarned = true;\n  }\n\n  return extensionPort.queryGraphql({ query, variables })\n}\n\nlet mutateWarned = false;\nexport async function mutateGraphql({ mutation, variables }) {\n  if (!mutateWarned) {\n    console.warn(\"@replit/extensions: mutateGraphql() will be deprecated very soon\");\n    mutateWarned = true;\n  }\n\n  return extensionPort.mutateGraphql({ mutation, variables })\n}\n", "import { extensionPort } from \"src\";\n\nlet warned = false;\n\nexport async function evalCode({ code }) {\n  if (!warned) {\n    console.warn(\"@replit/extensions: evalCode() will be deprecated very soon\");\n    warned = true;\n  }\n\n  return await extensionPort.eval(code);\n}\n", "export type Pane = {\n  type: string;\n  id: string;\n};\n\n/**\n * Enumeration of file types.\n */\nexport enum FileType {\n  /**\n   * A regular file.\n   */\n  File = \"FILE\",\n  /**\n   * A directory/folder\n   */\n  Directory = \"DIRECTORY\",\n}\n\n/**\n * A base interface for nodes, just includes\n * the type of the node and the path, This interface\n * does not expose the node's content/children\n */\nexport interface FsNode {\n  /**\n   * Full path of the node relative to the root\n   */\n  path: string;\n\n  /**\n   * node is a file\n   */\n  type: FileType;\n}\n\nexport interface WatchFileWatchers {\n  onChange: (newContent: string) => void;\n  onError: (error: string) => void;\n  onMoveOrDelete: (args: {\n    eventType: \"MOVE\" | \"DELETE\";\n    node: FsNode;\n  }) => void;\n}\n\nexport interface WatchTextFileWatchers {\n  onReady: (readyArgs: { initialContent: string; version: number }) => void;\n  onChange: (changeArgs: {\n    latestContent: string;\n    version: number;\n    changeSource: string;\n    changes: any; // TODO fix\n  }) => void;\n  onError: (error: string) => void;\n  onMoveOrDelete: (args: {\n    eventType: \"MOVE\" | \"DELETE\";\n    node: FsNode;\n  }) => void;\n}\n\n/**\n * A unique id for a pane in the layout\n */\nexport type PaneId = string;\n\n/**\n * A unique id for a pane group in the layout\n */\nexport type PaneGroupId = string;\n\n/**\n * Represents the Repl's layout and pane data in a serializable manner\n */\nexport interface LayoutData {\n  layout: {\n    floating: Array<FloatingPaneGroup>\n    tiling: any;\n  },\n  data: Record<string, any>,\n  sidebarPercent: number;\n}\n\n/**\n * The size in pixles within the layout\n */\nexport interface Size {\n  width: number;\n  height: number;\n}\n\n/**\n * The position in pixles within the layout\n */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Size and position in pixles within the layout\n */\nexport interface Rect extends Point, Size { }\n\n/**\n * A floating group of panes\n */\nexport interface FloatingPaneGroup {\n  id: string;\n  type: 'floatingPaneGroup';\n  panes: Array<PaneId>;\n  activeIndex: number;\n  rect: Rect;\n}\n\ntype Source = 'workspace' | 'extension';\n\nexport type Event = {\n  type: 'string';\n  source: Source;\n  data?: any;\n}\n\nexport type ExtensionPortAPI = {\n  // misc\n  handshake: (args: { permissions: Array<string> }) => void;\n  // fs\n  readFile: (path: string) => Promise<{ content: string } | { error: string }>;\n  writeFile: (\n    path: string,\n    content: string | Blob\n  ) => Promise<{ success: boolean } | { error: string }>;\n  readDir: (path: string) => Promise<{\n    children: Array<{ filename: string; type: \"FILE\" | \"DIRECTORY\" }>;\n    error: string;\n  }>;\n  createDir: (path: string) => Promise<{} | { error: string }>;\n  deleteFile: (path: string) => Promise<{} | { error: string }>;\n  deleteDir: (path: string) => Promise<{} | { error: string }>;\n  move: (path: string, to: string) => Promise<{ error: string | null }>;\n  copyFile: (path: string, to: string) => Promise<{ error: string | null }>;\n  watchFile: (path: string, watcher: WatchFileWatchers) => () => void;\n  watchTextFile: (path: string, watcher: WatchTextFileWatchers) => () => void;\n\n  // replDb\n  setReplDbValue: (key: string, value: string) => Promise<void>;\n  getReplDbValue: (key: string) => Promise<string | null>;\n  listReplDbKeys: (\n    prefix: string\n  ) => Promise<{ keys: string[] } | { error: string }>;\n  deleteReplDbKey: (key: string) => Promise<void>;\n\n  // layout\n  isPaneTypeVisible: (paneType: string) => Promise<boolean>;\n  findPaneByType: (paneType: string) => Promise<{\n    paneId: string;\n    isHidden: boolean;\n    isDialog: boolean;\n    type: \"tile\" | \"floating\";\n    data: any;\n  } | null>;\n  selectTab: (paneId: string) => Promise<void>;\n  insertFloatingPaneIfNotExist(pane: Pane): Promise<void>;\n  removeFloatingPanesByType(paneType: string): Promise<void>;\n  getLayoutState(): Promise<LayoutData>;\n  setLayoutState(state: LayoutData): Promise<void>;\n\n  // Events\n\n  emitEvent(event: Omit<Event, 'source'>): void;\n  onWorkspaceEvent(listener: (event: Event) => void): Promise<() => void>;\n\n  // jets (will be deprecated)\n\n  // graphql\n  queryGraphql(args: { query: string, variables?: Record<string, any> }): any;\n  mutateGraphql(args: { mutation: string, variables?: Record<string, any> }): any;\n\n  // eval\n  eval(code: string): any;\n};\n"],
  "mappings": "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",
  "names": ["obj", "returnValue", "proxy", "proxy", "proxy", "proxy", "FileType", "debug"]
}
