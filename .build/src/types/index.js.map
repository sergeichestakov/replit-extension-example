{
  "version": 3,
  "sources": ["../../../src/types/index.ts"],
  "sourcesContent": ["export type Pane = {\n  type: string;\n  id: string;\n};\n\n/**\n * Enumeration of file types.\n */\nexport enum FileType {\n  /**\n   * A regular file.\n   */\n  File = \"FILE\",\n  /**\n   * A directory/folder\n   */\n  Directory = \"DIRECTORY\",\n}\n\n/**\n * A base interface for nodes, just includes\n * the type of the node and the path, This interface\n * does not expose the node's content/children\n */\nexport interface FsNode {\n  /**\n   * Full path of the node relative to the root\n   */\n  path: string;\n\n  /**\n   * node is a file\n   */\n  type: FileType;\n}\n\nexport interface WatchFileWatchers {\n  onChange: (newContent: string) => void;\n  onError: (error: string) => void;\n  onMoveOrDelete: (args: {\n    eventType: \"MOVE\" | \"DELETE\";\n    node: FsNode;\n  }) => void;\n}\n\nexport interface WatchTextFileWatchers {\n  onReady: (readyArgs: { initialContent: string; version: number }) => void;\n  onChange: (changeArgs: {\n    latestContent: string;\n    version: number;\n    changeSource: string;\n    changes: any; // TODO fix\n  }) => void;\n  onError: (error: string) => void;\n  onMoveOrDelete: (args: {\n    eventType: \"MOVE\" | \"DELETE\";\n    node: FsNode;\n  }) => void;\n}\n\n/**\n * A unique id for a pane in the layout\n */\nexport type PaneId = string;\n\n/**\n * A unique id for a pane group in the layout\n */\nexport type PaneGroupId = string;\n\n/**\n * Represents the Repl's layout and pane data in a serializable manner\n */\nexport interface LayoutData {\n  layout: {\n    floating: Array<FloatingPaneGroup>\n    tiling: any;\n  },\n  data: Record<string, any>,\n  sidebarPercent: number;\n}\n\n/**\n * The size in pixles within the layout\n */\nexport interface Size {\n  width: number;\n  height: number;\n}\n\n/**\n * The position in pixles within the layout\n */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Size and position in pixles within the layout\n */\nexport interface Rect extends Point, Size {}\n\n/**\n * A floating group of panes\n */\nexport interface FloatingPaneGroup {\n  id: string;\n  type: 'floatingPaneGroup';\n  panes: Array<PaneId>;\n  activeIndex: number;\n  rect: Rect;\n}\n\nexport type ExtensionPortAPI = {\n  // fs\n  readFile: (path: string) => Promise<{ content: string } | { error: string }>;\n  writeFile: (\n    path: string,\n    content: string | Blob\n  ) => Promise<{ success: boolean } | { error: string }>;\n  readDir: (path: string) => Promise<{\n    children: Array<{ filename: string; type: \"FILE\" | \"DIRECTORY\" }>;\n    error: string;\n  }>;\n  createDir: (path: string) => Promise<{} | { error: string }>;\n  deleteFile: (path: string) => Promise<{} | { error: string }>;\n  deleteDir: (path: string) => Promise<{} | { error: string }>;\n  move: (path: string, to: string) => Promise<{ error: string | null }>;\n  copyFile: (path: string, to: string) => Promise<{ error: string | null }>;\n  watchFile: (path: string, watcher: WatchFileWatchers) => () => void;\n  watchTextFile: (path: string, watcher: WatchTextFileWatchers) => () => void;\n\n  // replDb\n  setReplDbValue: (key: string, value: string) => Promise<void>;\n  getReplDbValue: (key: string) => Promise<string | null>;\n  listReplDbKeys: (\n    prefix: string\n  ) => Promise<{ keys: string[] } | { error: string }>;\n  deleteReplDbKey: (key: string) => Promise<void>;\n\n  // layout\n  isPaneTypeVisible: (paneType: string) => Promise<boolean>;\n  findPaneByType: (paneType: string) => Promise<{\n    paneId: string;\n    isHidden: boolean;\n    isDialog: boolean;\n    type: \"tile\" | \"floating\";\n    data: any;\n  } | null>;\n  selectTab: (paneId: string) => Promise<void>;\n  insertFloatingPaneIfNotExist(pane: Pane): Promise<void>;\n  removeFloatingPanesByType(paneType: string): Promise<void>;\n  getLayoutState(): Promise<LayoutData>;\n  setLayoutState(state: LayoutData): Promise<void>;\n};\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAQO,IAAK;AAAL,UAAK,WAAL;AAIL,sBAAO;AAIP,2BAAY;AAAA,GARF;",
  "names": []
}
