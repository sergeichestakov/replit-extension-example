{
  "version": 3,
  "sources": ["../../../src/api/layout.ts"],
  "sourcesContent": ["import { LayoutData, Pane } from \"src/types\";\nimport { extensionPort } from \"src/util/comlink\";\n\n/** \n * Returns whether a certain pane type is visible within the layout.\n * Example use case: check if the version control pane is visible\n * before doing something.\n */\nexport async function isPaneTypeVisible(paneType: string) {\n  return extensionPort.isPaneTypeVisible(paneType);\n}\n\n/**\n * Returns information about a pane by its type. If multiple panes of a type are open, this returns the first.\n */\nexport async function findPaneByType(paneType: string) {\n  return extensionPort.findPaneByType(paneType);\n}\n\n/**\n * Makes a pane the active one within its group\n */\nexport async function selectTab(paneId: string) {\n  return extensionPort.selectTab(paneId);\n}\n\n/**\n * Inserts a floating pane into the layout if it doesn't exist\n */\nexport async function insertFloatingPaneIfNotExist(pane: Pane) {\n  return extensionPort.insertFloatingPaneIfNotExist(pane);\n}\n\n/**\n * Removes all floating pane of a given type\n */\nexport async function removeFloatingPanesByType(paneType: string) {\n  return extensionPort.removeFloatingPanesByType(paneType);\n}\n\n/**\n * Gets the entire layout tree, with pane data\n */\nexport async function getLayoutState() {\n  return extensionPort.getLayoutState();\n}\n\n/**\n * Sets the layout tree and pane data\n */\nexport async function setLayoutState(state: LayoutData) {\n  return extensionPort.setLayoutState(state);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAA8B;AAO9B,iCAAwC,UAAkB;AACxD,SAAO,6BAAc,kBAAkB;AAAA;AAMzC,8BAAqC,UAAkB;AACrD,SAAO,6BAAc,eAAe;AAAA;AAMtC,yBAAgC,QAAgB;AAC9C,SAAO,6BAAc,UAAU;AAAA;AAMjC,4CAAmD,MAAY;AAC7D,SAAO,6BAAc,6BAA6B;AAAA;AAMpD,yCAAgD,UAAkB;AAChE,SAAO,6BAAc,0BAA0B;AAAA;AAMjD,gCAAuC;AACrC,SAAO,6BAAc;AAAA;AAMvB,8BAAqC,OAAmB;AACtD,SAAO,6BAAc,eAAe;AAAA;",
  "names": []
}
