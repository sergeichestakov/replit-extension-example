{
  "version": 3,
  "sources": ["../../../util/signature-plugin/index.js"],
  "sourcesContent": ["const { SignatureReflection, ReflectionKind, ReflectionType } = require(\"typedoc\")\n\n// from https://github.com/TypeStrong/typedoc/issues/1662#issuecomment-907717438\nexports.load = function(app) {\n    // This adds a string representation for function call signatures directly to the JSON output\n    app.serializer.addSerializer({\n        supports(x) {\n            return x instanceof SignatureReflection;\n        },\n        priority: 0,\n        toObject(signature, obj) {\n            // name of the function\n            const parts = [signature.name];\n\n            // adds `new` if it's a constructor\n            if (signature.kind === ReflectionKind.ConstructorSignature) {\n                if (signature.flags.isAbstract) parts.push(\"abstract \")\n                parts.push(\"new \")\n            }\n\n            // if it's a generic function, adds the type parameters\n            if (signature.typeParameters) {\n                parts.push(\"<\")\n                let first = true\n                for (const typeParam of signature.typeParameters) {\n                    if (!first) parts.push(\", \")\n                    parts.push(typeParam.name)\n                    if (typeParam.type) {\n                        parts.push(\" extends \", typeParam.type.toString())\n                    }\n                    if (typeParam.default) {\n                        parts.push(\" = \", typeParam.default.toString())\n                    }\n                    first = false\n                }\n                parts.push(\">\")\n            }\n\n            // adds the parameters\n            parts.push(\"(\")\n            let first = true\n            for (const param of (signature.parameters || [])) {\n                if (!first) parts.push(\", \")\n                parts.push(param.name, \": \", param.type.toString())\n                first = false\n            }\n            parts.push(\"): \")\n\n            // adds the return type\n            parts.push(signature.type.toString())\n\n            obj.stringifiedSignature = parts.join(\"\")\n            return obj\n        }\n    });\n\n    // This adds a stringified representation of object types to the JSON output\n    app.serializer.addSerializer({\n        supports(x) {\n            return x instanceof ReflectionType;\n        },\n        priority: 1,\n        toObject: (x, obj) => {\n            let oldStringify = x.stringify;\n            x.stringify = () => {\n                if (!x.declaration.children) {\n                    if (oldStringify.call(x) === \"Object\") {\n                        // HACK: usually it's an empty object\n                        return '{}'\n                    }\n                    return oldStringify.call(x);\n                }\n\n                return `{ ${x.declaration.children.map(ch => `${ch.name}: ${ch.type.stringify()}`).join(\", \")} }`;\n            }\n            return obj\n        }\n    });\n\n    // This adds a stringified representation of interface types to the JSON output\n    app.serializer.addSerializer({\n        supports(x) {\n            return (x.kind === ReflectionKind.Interface)\n        },\n        priority: 0,\n        toObject: (x, obj) => {\n            obj.stringifiedInterface = `interface ${x.name} {\\n${x.children.map(c => `    ${c.name}: ${c.type.toString()},`).join('\\n')}\\n}`\n            return obj;\n        }\n    });\n}"],
  "mappings": "AAAA,MAAM,EAAE,qBAAqB,gBAAgB,mBAAmB,QAAQ;AAGxE,QAAQ,OAAO,SAAS,KAAK;AAEzB,MAAI,WAAW,cAAc;AAAA,IACzB,SAAS,GAAG;AACR,aAAO,aAAa;AAAA;AAAA,IAExB,UAAU;AAAA,IACV,SAAS,WAAW,KAAK;AAErB,YAAM,QAAQ,CAAC,UAAU;AAGzB,UAAI,UAAU,SAAS,eAAe,sBAAsB;AACxD,YAAI,UAAU,MAAM;AAAY,gBAAM,KAAK;AAC3C,cAAM,KAAK;AAAA;AAIf,UAAI,UAAU,gBAAgB;AAC1B,cAAM,KAAK;AACX,YAAI,SAAQ;AACZ,mBAAW,aAAa,UAAU,gBAAgB;AAC9C,cAAI,CAAC;AAAO,kBAAM,KAAK;AACvB,gBAAM,KAAK,UAAU;AACrB,cAAI,UAAU,MAAM;AAChB,kBAAM,KAAK,aAAa,UAAU,KAAK;AAAA;AAE3C,cAAI,UAAU,SAAS;AACnB,kBAAM,KAAK,OAAO,UAAU,QAAQ;AAAA;AAExC,mBAAQ;AAAA;AAEZ,cAAM,KAAK;AAAA;AAIf,YAAM,KAAK;AACX,UAAI,QAAQ;AACZ,iBAAW,SAAU,UAAU,cAAc,IAAK;AAC9C,YAAI,CAAC;AAAO,gBAAM,KAAK;AACvB,cAAM,KAAK,MAAM,MAAM,MAAM,MAAM,KAAK;AACxC,gBAAQ;AAAA;AAEZ,YAAM,KAAK;AAGX,YAAM,KAAK,UAAU,KAAK;AAE1B,UAAI,uBAAuB,MAAM,KAAK;AACtC,aAAO;AAAA;AAAA;AAKf,MAAI,WAAW,cAAc;AAAA,IACzB,SAAS,GAAG;AACR,aAAO,aAAa;AAAA;AAAA,IAExB,UAAU;AAAA,IACV,UAAU,CAAC,GAAG,QAAQ;AAClB,UAAI,eAAe,EAAE;AACrB,QAAE,YAAY,MAAM;AAChB,YAAI,CAAC,EAAE,YAAY,UAAU;AACzB,cAAI,aAAa,KAAK,OAAO,UAAU;AAEnC,mBAAO;AAAA;AAEX,iBAAO,aAAa,KAAK;AAAA;AAG7B,eAAO,KAAK,EAAE,YAAY,SAAS,IAAI,QAAM,GAAG,GAAG,SAAS,GAAG,KAAK,eAAe,KAAK;AAAA;AAE5F,aAAO;AAAA;AAAA;AAKf,MAAI,WAAW,cAAc;AAAA,IACzB,SAAS,GAAG;AACR,aAAQ,EAAE,SAAS,eAAe;AAAA;AAAA,IAEtC,UAAU;AAAA,IACV,UAAU,CAAC,GAAG,QAAQ;AAClB,UAAI,uBAAuB,aAAa,EAAE;AAAA,EAAW,EAAE,SAAS,IAAI,OAAK,OAAO,EAAE,SAAS,EAAE,KAAK,eAAe,KAAK;AAAA;AACtH,aAAO;AAAA;AAAA;AAAA;",
  "names": []
}
